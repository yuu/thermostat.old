// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "thermostat": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/yuu/thermostat/design
// --out=$(GOPATH)/src/github.com/yuu/thermostat
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// StatusOperandsContext provides the operands status action context.
type StatusOperandsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewStatusOperandsContext parses the incoming request URL and body, performs validations and creates the
// context used by the operands controller status action.
func NewStatusOperandsContext(ctx context.Context, r *http.Request, service *goa.Service) (*StatusOperandsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StatusOperandsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StatusOperandsContext) OK(r *JSON) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// TargetHeatingCoolingStateOperandsContext provides the operands targetHeatingCoolingState action context.
type TargetHeatingCoolingStateOperandsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Value int
}

// NewTargetHeatingCoolingStateOperandsContext parses the incoming request URL and body, performs validations and creates the
// context used by the operands controller targetHeatingCoolingState action.
func NewTargetHeatingCoolingStateOperandsContext(ctx context.Context, r *http.Request, service *goa.Service) (*TargetHeatingCoolingStateOperandsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TargetHeatingCoolingStateOperandsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramValue := req.Params["value"]
	if len(paramValue) > 0 {
		rawValue := paramValue[0]
		if value, err2 := strconv.Atoi(rawValue); err2 == nil {
			rctx.Value = value
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("value", rawValue, "integer"))
		}
		if rctx.Value < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`value`, rctx.Value, 0, true))
		}
		if rctx.Value > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`value`, rctx.Value, 3, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TargetHeatingCoolingStateOperandsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// TargetRelativeHumidityOperandsContext provides the operands targetRelativeHumidity action context.
type TargetRelativeHumidityOperandsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Value int
}

// NewTargetRelativeHumidityOperandsContext parses the incoming request URL and body, performs validations and creates the
// context used by the operands controller targetRelativeHumidity action.
func NewTargetRelativeHumidityOperandsContext(ctx context.Context, r *http.Request, service *goa.Service) (*TargetRelativeHumidityOperandsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TargetRelativeHumidityOperandsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramValue := req.Params["value"]
	if len(paramValue) > 0 {
		rawValue := paramValue[0]
		if value, err2 := strconv.Atoi(rawValue); err2 == nil {
			rctx.Value = value
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("value", rawValue, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TargetRelativeHumidityOperandsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// TargetTemperatureOperandsContext provides the operands targetTemperature action context.
type TargetTemperatureOperandsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Value int
}

// NewTargetTemperatureOperandsContext parses the incoming request URL and body, performs validations and creates the
// context used by the operands controller targetTemperature action.
func NewTargetTemperatureOperandsContext(ctx context.Context, r *http.Request, service *goa.Service) (*TargetTemperatureOperandsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := TargetTemperatureOperandsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramValue := req.Params["value"]
	if len(paramValue) > 0 {
		rawValue := paramValue[0]
		if value, err2 := strconv.Atoi(rawValue); err2 == nil {
			rctx.Value = value
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("value", rawValue, "integer"))
		}
		if rctx.Value < 16 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`value`, rctx.Value, 16, true))
		}
		if rctx.Value > 31 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`value`, rctx.Value, 31, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *TargetTemperatureOperandsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
