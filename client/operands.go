// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "thermostat": operands Resource Client
//
// Command:
// $ goagen
// --design=thermostat/design
// --out=$(GOPATH)/src/thermostat
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// StatusOperandsPath computes a request path to the status action of operands.
func StatusOperandsPath() string {

	return fmt.Sprintf("/status")
}

// Get any thermostat info
func (c *Client) StatusOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewStatusOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewStatusOperandsRequest create the request corresponding to the status action endpoint of the operands resource.
func (c *Client) NewStatusOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// TargetHeatingCoolingStateOperandsPath computes a request path to the targetHeatingCoolingState action of operands.
func TargetHeatingCoolingStateOperandsPath(value int) string {
	param0 := strconv.Itoa(value)

	return fmt.Sprintf("/targetHeatingCoolingState/%s", param0)
}

// Set target HeatingCoolingState
func (c *Client) TargetHeatingCoolingStateOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewTargetHeatingCoolingStateOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewTargetHeatingCoolingStateOperandsRequest create the request corresponding to the targetHeatingCoolingState action endpoint of the operands resource.
func (c *Client) NewTargetHeatingCoolingStateOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// TargetRelativeHumidityOperandsPath computes a request path to the targetRelativeHumidity action of operands.
func TargetRelativeHumidityOperandsPath(value int) string {
	param0 := strconv.Itoa(value)

	return fmt.Sprintf("/targetRelativeHumidity/%s", param0)
}

// Set target relative humidity
func (c *Client) TargetRelativeHumidityOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewTargetRelativeHumidityOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewTargetRelativeHumidityOperandsRequest create the request corresponding to the targetRelativeHumidity action endpoint of the operands resource.
func (c *Client) NewTargetRelativeHumidityOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// TargetTemperatureOperandsPath computes a request path to the targetTemperature action of operands.
func TargetTemperatureOperandsPath(value int) string {
	param0 := strconv.Itoa(value)

	return fmt.Sprintf("/targetTemperature/%s", param0)
}

// Set target temperature
func (c *Client) TargetTemperatureOperands(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewTargetTemperatureOperandsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewTargetTemperatureOperandsRequest create the request corresponding to the targetTemperature action endpoint of the operands resource.
func (c *Client) NewTargetTemperatureOperandsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
