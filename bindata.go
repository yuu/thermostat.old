// Code generated by go-bindata.
// sources:
// ir-data/mode-cool
// ir-data/mode-heat
// ir-data/mode-humidity
// ir-data/off
// ir-data/on
// ir-data/wind-1
// ir-data/wind-2
// ir-data/wind-3
// ir-data/wind-4
// ir-data/wind-auto
// ir-data/wind-swing
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modeCool = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xd1\x0a\xc2\x30\x0c\xfc\xa1\x3d\x24\x76\xc2\x3e\x48\xfd\x86\x7d\xbe\x0c\x6c\x11\x89\xe5\xe0\x82\x49\x5d\x5f\xe4\xbc\x91\x36\x6d\x2e\xd7\x56\x76\x91\x45\xf6\xed\xba\xbc\xd0\x5a\x2a\x52\xa9\xa8\x68\xe3\xb4\xc7\x99\xa8\x8d\xa2\x97\x1e\x57\xac\xaf\x68\xac\x95\x1f\x38\x9e\xfb\xbc\xe0\x1e\x30\x39\xff\x62\x1d\x68\x6c\x52\x0e\x55\xe7\x30\x28\xaa\x46\x96\xae\xbc\x73\x61\x7a\x26\x4a\x6b\x66\xff\xa2\xb1\x20\x97\xbd\x3f\xe0\x33\x20\x13\x0a\xd2\xcb\xf4\xbf\x53\xd7\x28\x7e\x4f\x67\x8d\xbc\xce\x14\xeb\xbe\xf6\xd5\x13\x8f\x9f\x47\x8b\xdd\xd6\x8a\xde\xee\xd9\x5d\x3f\x75\x3a\xf3\xba\x39\xa3\x3a\x45\xd6\x3b\xc2\xbc\xde\x35\x67\xd6\x31\x3d\x22\x17\xc7\x68\x83\xba\x4b\x11\x1a\x67\xe6\xf0\xd6\xb8\x37\x32\xdf\x1f\x60\x15\x98\xd8\x4c\xfd\xc1\xbc\xed\x93\x72\xf1\xde\x34\xbd\xee\xbf\xeb\x16\xbf\x57\x99\x38\x8d\xce\xc0\xf4\x30\x22\xf6\x83\xd3\xfb\xf1\xf7\xf6\x0c\x00\x00\xff\xff\xa8\x7c\xeb\x69\xcf\x16\x00\x00")

func modeCoolBytes() ([]byte, error) {
	return bindataRead(
		_modeCool,
		"mode-cool",
	)
}

func modeCool() (*asset, error) {
	bytes, err := modeCoolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mode-cool", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modeHeat = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x51\x0e\xc2\x30\x08\xbd\xd0\x3e\x60\xcc\x64\x07\x52\xcf\xb0\xe3\x9b\x25\x6e\x1a\xf3\x42\x58\xc1\x8e\x66\xfd\x43\x5c\x81\xbe\xf7\x28\x2d\x2d\x44\x03\x2d\xf3\x34\xbc\xad\x49\x36\x8b\x79\xb3\x84\x76\xdf\xa8\xf9\xd8\xe1\x2b\x88\xf7\xa9\x6f\xb4\xd5\x5c\x90\x97\x35\x2b\x3a\xaf\x07\x53\x41\x95\x5a\xf1\xe3\x72\x0c\x9a\xb4\x82\xb5\x5b\xc3\x27\x88\x8f\x98\x1c\xba\xc6\x2b\x68\x43\x40\x64\xe4\xb3\xae\x4d\xa0\x30\x95\x23\xd4\xab\xb0\x7f\x93\xeb\x39\x7a\x06\x44\x6b\xb7\x49\xeb\x7c\x4c\x3b\x47\xd7\xe3\xe8\x38\x6f\xd9\xf9\x35\xee\x17\xce\x1e\xc7\x9c\xf9\xfd\x6e\xfd\xe3\xb9\xaf\x98\x6f\x9b\xf5\x75\xcf\x26\xb5\x16\x4f\x47\x19\xf7\xeb\xc2\xca\x18\x2f\x53\x5e\xf3\xac\x45\xf1\x82\xb5\x96\xa0\xcf\xfb\x79\x1f\x75\x9f\x74\xe0\x57\x43\x1b\xe6\x7b\x67\xb0\xee\xcf\xd2\x1a\x7a\xbb\x78\xde\xc9\x4d\x6a\xf2\x7f\xda\xcd\xa4\x83\xcb\x9e\x57\x09\xf0\xeb\x1c\x75\x8e\x8e\x9c\x61\xea\xec\x29\x9c\x47\xfc\x58\x7f\xde\x5f\x01\x00\x00\xff\xff\x13\xc3\x90\x2f\xcf\x16\x00\x00")

func modeHeatBytes() ([]byte, error) {
	return bindataRead(
		_modeHeat,
		"mode-heat",
	)
}

func modeHeat() (*asset, error) {
	bytes, err := modeHeatBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mode-heat", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modeHumidity = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x41\x0a\xc3\x30\x0c\xfb\x50\x0f\xce\x9a\x41\x1f\xb4\xf5\x0d\x7d\xfe\x28\x2c\xbd\x4c\x04\x41\x8c\xe5\xd1\x5c\x86\x66\xe6\x39\x91\x14\x35\xb5\xc3\x6c\xb1\x63\xab\xcb\x17\xd5\xb5\xa1\x62\x0d\xad\xe5\xaa\x15\x50\x7b\xfc\x76\x14\xd0\xd1\x47\x68\xc6\x48\x2f\xfb\x7f\x43\x73\xc1\xce\x47\xe6\x8e\x70\x8a\xd6\x12\xc1\x7d\x08\xb2\x2e\x2f\xff\x58\x1b\xf1\x1a\xe2\x25\x54\x0f\x99\x5f\x00\xa7\xd0\xf7\x22\x7d\x57\xf6\x77\xec\xf9\xd5\xfb\xb4\xeb\x5d\xef\x67\x40\x2a\xa4\xe7\x39\x65\x0e\xa5\x47\x7a\x4e\xa7\x1e\xc1\x1a\xa9\xb2\x93\xb9\x77\x9e\x1f\xfb\xd5\xbb\x3d\x1b\xaa\xe0\x79\x4e\xdf\x63\x9d\xd7\xec\xb9\x5f\xe5\x5c\xdb\xc9\x5e\x15\x7f\x3e\xfe\xd3\x9f\xdf\xe4\x79\xa0\x3a\x1f\xde\x5a\xa6\xba\xf3\x27\x72\x22\x9b\xf7\xf0\xfd\x9c\xdd\xc7\x7d\x3d\x99\x48\xe9\x7b\x64\xce\xd4\x68\xea\x26\x45\xe4\x4a\x61\x76\x06\xd4\x88\x1c\x2f\xef\xf3\xeb\xeb\x13\x00\x00\xff\xff\xcf\x4e\x97\xc6\xcf\x16\x00\x00")

func modeHumidityBytes() ([]byte, error) {
	return bindataRead(
		_modeHumidity,
		"mode-humidity",
	)
}

func modeHumidity() (*asset, error) {
	bytes, err := modeHumidityBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mode-humidity", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _off = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x41\x0a\xc3\x30\x0c\xfb\x50\x0f\x4e\x93\x41\x1f\xb4\xf5\x0d\x7d\xfe\x28\x2c\x39\x0c\x91\x79\x9e\x89\xdd\xcc\x97\xa1\x09\x1b\x0b\x39\x15\xa6\x83\x68\xa1\x63\x2b\xcb\x0b\x95\x5c\x51\x4a\x15\xe5\x04\x38\x6a\xdc\xda\xd0\xf7\x1c\x9a\xd1\xad\x43\x08\xf5\x22\xcd\x82\xb9\x7d\xcd\x2b\xcf\x2b\xa5\xde\xae\x3e\xc1\x3e\x54\xbc\xbf\x24\xd2\x79\xbb\x9e\xb8\xa1\xfe\x65\x73\x05\x4a\x5a\x94\xf7\x01\xb5\x30\xeb\xb8\xbd\x9e\x38\x41\x5e\xd9\x7f\xfb\x8e\xf2\x85\x76\x3f\xbb\x8c\x1d\x4d\xc9\xd9\xfb\x3c\x60\x47\x23\xb2\x93\x9b\x75\xef\x75\xe7\xcf\xde\xea\xb6\x5b\x45\x85\x79\xff\xfd\x72\x13\x2a\x65\x76\xb7\x57\xea\x8b\xe5\x5c\x6d\x2d\x23\x7a\x23\x0f\xfe\x26\xc7\xd1\x6d\x6b\x7e\x5f\x5d\xf1\xe6\x67\xdf\xd9\xce\xdf\x9f\x83\xdc\x70\xb4\xfd\xc8\x12\x11\x17\x6e\xcc\xf3\x8a\xc9\xc6\x2b\x98\x43\xca\xde\xc3\x19\x9f\xeb\xd2\xe3\xfc\x7b\x7f\x06\x00\x00\xff\xff\x8e\xe0\x60\xef\xcf\x16\x00\x00")

func offBytes() ([]byte, error) {
	return bindataRead(
		_off,
		"off",
	)
}

func off() (*asset, error) {
	bytes, err := offBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "off", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _on = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xd1\x0e\x82\x30\x0c\xfc\x21\x1e\x5a\x37\x13\x3e\x48\xf9\x06\x3e\xdf\x90\x38\x88\xc9\x69\x2a\x2d\x6b\x19\x7b\x31\xe7\xc2\xda\xeb\xee\x56\x0a\xcd\x44\x03\xcd\xe3\x7d\x78\xa3\x9c\x0a\x62\x2a\x28\xdd\x64\x6b\xcc\xfb\x91\x26\x9e\x86\x5f\xa4\xbc\xd6\x5c\x6a\xec\x85\x68\x8b\x82\x22\x47\x5a\xd3\x54\x59\x15\x99\x6b\xa4\xd0\x12\x72\x71\xd2\x32\xd5\xf5\x9f\x54\x23\xc4\xe5\xe7\x73\xe9\x84\x3e\x75\xf3\xe4\xb9\x7b\x4e\xa4\x53\xeb\x7a\x5c\x59\xa3\x46\x74\xdb\xf1\x0e\xb0\xee\x7f\xfc\x8d\xcb\xf2\x33\xad\x79\xc7\x5c\x50\x46\x7b\x05\xf1\xb4\x75\x04\x98\x77\xff\xae\xe3\xc0\x39\x5b\xc3\xc5\xa4\x8e\x00\x37\xfe\xb2\x7d\x43\x3a\x9b\x79\xa9\x15\xc9\x2f\x2a\x2e\xc6\xba\x49\xbf\x3f\xc4\x7d\xc3\xdf\x7f\x1a\x4f\x7a\xb9\x64\xcd\x4b\x13\xe0\x12\xe9\x24\x03\xdd\xa3\x66\x3a\x6b\xaf\xa8\x6d\x04\xce\x0a\xce\xa2\xc7\xe9\xcb\x20\xef\xc6\xe5\x73\x2f\x3f\x97\xbf\x8f\x57\x00\x00\x00\xff\xff\xf0\xc8\x31\x9b\xcf\x16\x00\x00")

func onBytes() ([]byte, error) {
	return bindataRead(
		_on,
		"on",
	)
}

func on() (*asset, error) {
	bytes, err := onBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "on", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wind1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x0e\xc2\x30\x0c\xfb\xd0\x0e\xc9\x02\x12\x0f\x02\xde\xb0\xe7\xa3\x49\x6c\x42\xc8\x87\xd0\x44\x89\x07\xdc\x82\xb7\xb6\xc6\xb6\xd2\xae\xb2\x88\x4c\xb2\x5c\xce\xd3\xb3\x3a\xcd\x5b\xa5\xba\x55\xa6\x3e\x4c\x65\xaf\xe6\x4f\xb1\xc8\x7c\xe6\xc4\xbc\x63\x23\x9c\xbd\xff\x03\x72\x8e\x68\x80\x9e\x16\x68\x3f\x80\xa1\xd5\x7e\xb7\xca\xf1\xa8\xc2\xb7\xec\xbc\xa4\xe8\x07\x73\xdf\xe4\xa5\x97\x0b\x7a\x0f\x6a\x4a\x94\xc9\x8a\x3d\x80\x00\xeb\xd7\x9e\xc8\x73\x02\xac\x5f\x17\xa6\xaa\xdf\x0f\x4a\xdf\x2a\xf6\x00\xd8\xb3\x1d\xd8\x3a\xc1\x7d\x7f\xfa\x72\xce\xb6\xb1\xf9\x3a\xb5\x8a\xf0\x63\x5a\x37\x9b\x0b\x53\x4e\x0f\xde\x5f\xda\x35\x60\xf2\x28\x9d\x4b\xc0\xa3\xc8\xf7\x65\x76\x0e\x0c\xdc\x51\xa0\xb1\xe8\xbd\x81\x33\x6b\xbb\xe7\x4c\x99\x3c\x50\x2f\xf9\xba\xde\x44\xe5\x51\x3f\xfb\x7f\x12\xab\x7b\x53\x41\x0e\xbc\x77\xb9\x6f\x98\xde\xd6\x9f\xd7\x47\x00\x00\x00\xff\xff\x5a\xa6\xf0\x56\xcf\x16\x00\x00")

func wind1Bytes() ([]byte, error) {
	return bindataRead(
		_wind1,
		"wind-1",
	)
}

func wind1() (*asset, error) {
	bytes, err := wind1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wind-1", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wind2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x0e\x02\x31\x08\xfc\xd0\x1e\xa8\xd5\xc4\x07\xa9\x6f\xd8\xe7\x9b\x4d\xdc\x5a\x93\x39\x90\x0c\x01\x6a\xb8\x21\x0a\xb4\x33\xd3\xb1\xa9\xec\x22\x9b\xec\xf7\xdb\xf6\x89\xae\x97\x33\x6a\xed\x8c\x7a\x03\x39\x19\xb9\x6f\x05\x91\x43\x33\xd4\xb5\xca\x9c\xb6\x96\x59\xb3\x7a\xae\x31\xa6\x14\x7e\x44\xed\x94\x43\x5d\xd6\x89\x8c\xf5\x6c\x9d\x33\xe2\xc8\x84\xcb\x69\x2d\xe1\x3a\x80\xb8\x04\x69\x43\xcb\x11\x3c\xfb\xa8\xb3\x87\xae\x8c\xf7\x91\xe9\xcc\xfc\xb5\x5f\xad\x8d\x7d\x71\x94\x0b\xe7\xa5\x39\x82\xde\x49\xd4\x6a\xfb\x69\x6a\x8f\x1f\xbf\xc6\xb7\xd3\x3d\xbb\xeb\xe6\x32\x7b\x33\xc7\x8a\xe8\xc7\xfc\x4f\xc3\xb9\x0e\xfc\x7a\x68\xad\xfc\x25\x97\xe7\xb8\x70\x44\xe8\x3e\x4a\x07\x99\xee\x7a\xd4\x3d\x3b\x48\x93\x5d\xf9\xae\x82\xfa\xa1\xda\x78\x75\x96\x5f\x65\xf0\xab\xe2\xad\x38\xf2\xc2\xca\xfa\x8d\x91\xf2\xf1\xdf\x5c\x7b\x1e\x1f\x1f\xef\x00\x00\x00\xff\xff\x24\xd4\x15\x6a\xcf\x16\x00\x00")

func wind2Bytes() ([]byte, error) {
	return bindataRead(
		_wind2,
		"wind-2",
	)
}

func wind2() (*asset, error) {
	bytes, err := wind2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wind-2", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wind3 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x0e\xc2\x30\x0c\xbb\xd0\x3e\x52\x3a\xa4\x1d\x08\x76\x86\x1d\x1f\x4d\xa2\xd5\x34\x22\x54\xe1\xb4\x4e\x59\x7f\x90\x49\x1f\x49\xec\x60\xb1\xc9\x26\x32\xc9\xb6\xdc\xa7\x37\x9a\x63\x42\x41\x12\x8a\x21\xc7\x32\x8a\xb7\xcf\x7d\x07\xa4\xad\x7e\x8d\x21\xf7\xa9\xf5\x29\x31\xf3\xbc\xca\x2a\x92\xd7\x9a\x83\x16\x67\x9d\xc6\xb4\x8e\xba\x46\x9e\x34\xea\xbc\x96\x7a\x1a\x15\x66\x2b\xf6\x2b\x4f\xb3\xd6\xa2\x66\xd2\x0c\x0d\x1f\xba\xb4\x6e\x7c\xfe\x86\x6e\x90\x46\x07\xdf\xd5\x7a\xab\xe7\xe3\x4a\xde\xb3\x27\xee\x1f\x6b\xbe\x65\x99\x13\x52\xff\x67\x17\xdc\xd7\xaa\xb7\xd2\xb3\x3f\x70\xc5\xca\x6b\xc2\x29\x32\x6b\x08\x07\xae\x10\xdf\x0f\xaa\x79\xbb\xf5\xef\x0d\x41\x9e\xe6\x05\xaa\xc5\x58\x5f\xd6\x33\x36\xad\x0f\x1b\x4e\xf9\xbe\x31\xfc\xea\x7f\x34\xa2\xb3\x26\xab\xb2\x8f\xcf\x4b\x8f\x53\x07\xbc\xb7\x40\x3a\x8f\xc0\xbe\x53\x2d\xe1\xb9\x7f\x7d\xbc\x02\x00\x00\xff\xff\x46\x8e\x7a\x56\xcf\x16\x00\x00")

func wind3Bytes() ([]byte, error) {
	return bindataRead(
		_wind3,
		"wind-3",
	)
}

func wind3() (*asset, error) {
	bytes, err := wind3Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wind-3", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wind4 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x6d\x0e\x82\x30\x0c\xbd\x10\x3f\x3a\x86\x09\x07\x52\xcf\xc0\xf1\x0d\x89\x9b\x89\xbe\x48\x67\xbb\xb6\x08\xff\x9e\x4f\xfa\xb1\xf6\xd1\x0e\x5a\x88\x06\x5a\xe6\x69\x78\xa2\x29\x17\x94\xa8\xa0\x9c\x2a\x37\x56\x8e\x3e\xb9\x97\x45\x4a\xad\x08\xc5\xe0\xfa\xcb\x88\x1b\x81\x05\xf0\xa7\x1e\x97\xe9\x0f\xd6\x14\x45\x6b\xcf\xa5\xfd\x1c\x2a\x1d\x0c\x80\xbe\x6b\x72\x8f\x5c\xb3\x9e\x2d\x50\x24\xbd\xc0\x77\xc6\x49\x1b\xb0\x2e\xcc\xe7\xb8\xb6\xea\x39\x0b\x6a\xb5\xb1\x03\x9a\x35\x7e\x38\x64\xd0\x5f\xed\x39\x74\x38\xe4\x5f\xfb\xb3\x6f\x1d\xf7\x91\x64\xee\x66\xa0\x92\x77\x7f\xeb\x23\xf7\xfa\xef\x7c\x29\x08\xde\xb3\x0d\xf6\x82\xe8\xbc\x82\xfc\x22\xc5\xd5\xce\xc5\xc2\xf6\x9c\x11\x36\x73\xfc\x87\x1e\x75\xdb\x15\x92\xbb\x99\xb6\x0e\xf6\xf8\xfd\xc1\x7e\xf7\x03\xe5\x2c\xb2\xed\xa7\x8d\x48\x9c\xff\x2c\x09\x34\xaf\xd4\xb9\xff\x3b\x91\x3f\xe7\xaf\x26\x95\x7e\xc0\x7d\x24\xb1\xe5\xce\xbf\x6d\x2e\xdd\xd6\x9f\xd7\x47\x00\x00\x00\xff\xff\x55\x87\xef\x0a\xcf\x16\x00\x00")

func wind4Bytes() ([]byte, error) {
	return bindataRead(
		_wind4,
		"wind-4",
	)
}

func wind4() (*asset, error) {
	bytes, err := wind4Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wind-4", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _windAuto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x0e\x83\x30\x0c\xfb\x10\x87\x86\x72\xd8\x83\xb6\xbd\x81\xe7\x4f\x48\xa3\x9a\x34\x0b\x5c\x68\x14\x83\x7a\xcb\xac\x84\x3a\x89\x9b\x46\x4b\x73\x4a\x43\x9a\x1f\xd3\xf0\xb5\xa6\xbc\x5a\x66\xab\x95\x53\xc1\xc6\x82\xd9\xbf\x9f\x01\xbf\x1f\x0c\x45\x18\xf8\xde\x76\x2c\xc0\xf2\xc8\x71\x86\xb1\xec\xb9\x24\xe7\x9d\xba\x9c\xe1\xec\x97\x07\xe0\xc2\xc6\x4a\x59\xf5\xf5\xbb\x0c\x76\x40\x1b\xd5\x3a\x60\xad\xec\xf6\xe5\x03\x5c\x84\xf4\x02\xeb\x82\xfc\xd8\x3c\x84\xf4\xe7\xa8\xd3\xf8\xb9\xd1\xe7\x50\xef\xd1\xb5\xb0\x3b\x77\xa6\xba\x47\xec\xdc\x8d\xc0\x96\x64\xde\x05\xdb\xd9\xb3\xfd\xde\x85\x26\xbb\x1e\xdc\x59\x49\x7e\xec\x5e\xdc\xfc\xdc\x7a\x2e\xdb\x5a\x6b\x9c\xc7\xad\x6f\xb2\xc8\x1d\x6c\xd8\xdf\xbe\x67\x0b\xe8\x85\xde\xb3\x81\x9f\xf2\x5b\xe1\xac\xd3\xf8\x79\x10\x3f\x5f\xd4\x67\x53\x7c\x4d\xe3\x7b\xa4\x8e\xc5\xd7\x34\xa8\x1f\xc2\xff\x51\xd8\x6b\xf9\xf9\xfc\x04\x00\x00\xff\xff\x61\x49\x8a\x28\xcf\x16\x00\x00")

func windAutoBytes() ([]byte, error) {
	return bindataRead(
		_windAuto,
		"wind-auto",
	)
}

func windAuto() (*asset, error) {
	bytes, err := windAutoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wind-auto", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _windSwing = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xd1\x0e\xc2\x30\x08\xfc\xa1\x3d\x50\xab\x89\x1f\xa4\x7e\xc3\x3e\xdf\x2c\x71\xf5\x61\xa4\xbd\x15\x06\xa4\xe9\xdb\x89\x74\x3d\x38\x4a\x8e\x56\xa2\x85\xd6\xe7\x63\xf9\xa1\x7b\xde\x51\xa2\x1d\xe5\x54\x62\x05\xe5\xdb\x31\x2f\x31\x79\x28\xe2\xee\x80\xcf\x32\x5c\x50\x7e\x92\x3a\x44\xf7\x1a\x70\xb1\x38\xab\x8e\xfe\x0c\x38\x56\xd1\x63\x92\x7a\x2f\x7b\x1f\xda\xc8\x84\x0b\xd8\x7b\x96\x8b\xd3\x1c\x64\x41\xde\x85\x75\xa0\x5a\xd6\xf9\x05\xe2\x3c\x0c\x72\x9a\xd3\x50\xfb\x2f\x3a\xf2\xef\xe9\xd4\xa3\xc7\xbf\x80\xbd\x42\x3d\x5c\x6f\x6c\x23\xf9\x29\xff\x36\x7c\xb6\xc0\x4f\x7a\xf9\xc4\xf0\x3e\x5b\xb9\xa7\x6e\x3e\xfb\xfc\xdb\x8f\x1e\x73\xdf\x1b\xea\x1a\x29\xeb\x26\xd9\x6b\xea\xde\xd6\x76\x26\x51\x8d\x38\x2e\xd5\xbc\x46\x1d\xa6\x73\xd5\x88\xb9\x73\x9e\x9e\x6b\xec\x5d\x37\x35\x1a\x48\x4b\x83\x2a\xd9\x3d\x74\xfe\x2c\xd5\xbe\xd7\xe9\xb3\xd3\x7b\xfb\xf9\xfa\x06\x00\x00\xff\xff\x9b\xc3\x30\x0b\xcf\x16\x00\x00")

func windSwingBytes() ([]byte, error) {
	return bindataRead(
		_windSwing,
		"wind-swing",
	)
}

func windSwing() (*asset, error) {
	bytes, err := windSwingBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wind-swing", size: 5839, mode: os.FileMode(420), modTime: time.Unix(1500942694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mode-cool":     modeCool,
	"mode-heat":     modeHeat,
	"mode-humidity": modeHumidity,
	"off":           off,
	"on":            on,
	"wind-1":        wind1,
	"wind-2":        wind2,
	"wind-3":        wind3,
	"wind-4":        wind4,
	"wind-auto":     windAuto,
	"wind-swing":    windSwing,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mode-cool":     &bintree{modeCool, map[string]*bintree{}},
	"mode-heat":     &bintree{modeHeat, map[string]*bintree{}},
	"mode-humidity": &bintree{modeHumidity, map[string]*bintree{}},
	"off":           &bintree{off, map[string]*bintree{}},
	"on":            &bintree{on, map[string]*bintree{}},
	"wind-1":        &bintree{wind1, map[string]*bintree{}},
	"wind-2":        &bintree{wind2, map[string]*bintree{}},
	"wind-3":        &bintree{wind3, map[string]*bintree{}},
	"wind-4":        &bintree{wind4, map[string]*bintree{}},
	"wind-auto":     &bintree{windAuto, map[string]*bintree{}},
	"wind-swing":    &bintree{windSwing, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
